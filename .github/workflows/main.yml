name: Android App Test

on:
  push:
    branches: [ main ]
    paths:
      - 'Android-App-for-Car-Parking-Project/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Android-App-for-Car-Parking-Project/**'
  workflow_dispatch:

jobs:
  android-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      API_BASE_URL: "http://10.0.2.2:5000"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Create local.properties
        run: |
          cd Android-App-for-Car-Parking-Project
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" >> local.properties
          echo "API_BASE_URL=${{ env.API_BASE_URL }}" >> local.properties

      - name: Grant execute permission for gradlew
        run: |
          cd Android-App-for-Car-Parking-Project
          chmod +x ./gradlew

      - name: Build Debug APK
        run: |
          cd Android-App-for-Car-Parking-Project
          ./gradlew assembleDebug --stacktrace
        env:
          ANDROID_HOME: ${{ secrets.ANDROID_HOME }}
          MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
          API_BASE_URL: ${{ env.API_BASE_URL }}

      - name: Extract package name
        id: extract_package
        run: |
          cd Android-App-for-Car-Parking-Project
          if [ -f "app/build.gradle.kts" ]; then
            PACKAGE_NAME=$(grep -E 'applicationId\s*=' app/build.gradle.kts \
              | sed -E 's/.*applicationId\s*=\s*"([^"]+)".*/\1/' \
              | head -1)
          elif [ -f "app/build.gradle" ]; then
            PACKAGE_NAME=$(grep -E 'applicationId\s+' app/build.gradle \
              | sed -E 's/.*applicationId\s+"([^"]+)".*/\1/' \
              | head -1)
          else
            echo "ERROR: Cannot find app/build.gradle.kts or app/build.gradle"
            exit 1
          fi

          if [ -z "$PACKAGE_NAME" ]; then
            echo "ERROR: applicationId not found in Gradle files!"
            exit 1
          fi

          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "‚úîÔ∏è Found package: $PACKAGE_NAME"

      - name: Create test script
        run: |
          cd Android-App-for-Car-Parking-Project
          cat > test_script.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "‚è≥ Waiting for emulator to boot‚Ä¶"
          adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          echo "‚úÖ Emulator booted."

          echo "üßπ Clearing previous logcat‚Ä¶"
          adb logcat -c

          echo "üìã Starting background logcat ‚Üí /tmp/logcat.txt‚Ä¶"
          adb logcat > /tmp/logcat.txt &
          LOGCAT_PID=$!

          echo "üì¶ Installing APK‚Ä¶"
          adb install -r app/build/outputs/apk/debug/app-debug.apk

          echo "üöÄ Launching app‚Ä¶"
          adb shell "am start -n ${PACKAGE_NAME}/.MainActivity -a android.intent.action.MAIN -c android.intent.category.LAUNCHER"

          echo "‚è≤Ô∏è Running app for 60 seconds‚Ä¶"
          start_time=$(date +%s)
          
          # Create screenshots directory
          mkdir -p screenshots
          screenshot_count=1

          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))

            # Stop after 60s
            if [ $elapsed -ge 60 ]; then
              echo "‚úÖ Completed 60-second run!"
              break
            fi

            # Every 20 seconds: take screenshot
            if [ $((elapsed % 20)) -eq 0 ] && [ $elapsed -gt 0 ]; then
              echo "üì∏ Taking screenshot ${screenshot_count}..."
              adb shell screencap -p /sdcard/screenshot_${screenshot_count}.png
              adb pull /sdcard/screenshot_${screenshot_count}.png screenshots/
              screenshot_count=$((screenshot_count + 1))
            fi

            sleep 1
          done

          echo "üõë Stopping app‚Ä¶"
          adb shell am force-stop "$PACKAGE_NAME" || true

          echo "üóíÔ∏è Killing background logcat capture‚Ä¶"
          kill $LOGCAT_PID || true
          sleep 2

          echo "üì∏ Listing screenshots:"
          ls -la screenshots/

          echo "üéâ Workflow completed."
          EOF
          chmod +x test_script.sh

      - name: Run app on Android Emulator (API 28, pixel_2)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: pixel_2
          avd-name: pixel_2_api_28
          ram-size: 4096M
          heap-size: 1024M
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -camera-back none -camera-front none
          disable-animations: true
          script: ./test_script.sh
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: app-screenshots
          path: Android-App-for-Car-Parking-Project/screenshots/
          retention-days: 7
