name: Android Appium E2E CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Android-App-for-Car-Parking-Project/**'
      - 'Backend-Implementation-for-Car-Parking-Project/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Android-App-for-Car-Parking-Project/**'
      - 'Backend-Implementation-for-Car-Parking-Project/**'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  e2e-test:
    name: E2E Appium Android + Flask
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      API_BASE_URL: "http://10.0.2.2:5000/"
      TEST_DURATION: 120
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize and update submodules
        run: |
          git submodule update --init --recursive
          git submodule status

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start Flask backend in Docker
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          docker compose down -v || true
          docker compose up -d --build
          echo "⏳ Waiting for backend to be ready..."
          timeout=90
          while [ $timeout -gt 0 ]; do
            if curl -s -f http://127.0.0.1:5000/ > /dev/null; then
              echo "✅ Backend is ready!"
              break
            fi
            echo "Waiting for backend... ($timeout seconds left)"
            sleep 5
            timeout=$((timeout-5))
          done
          if [ $timeout -le 0 ]; then
            echo "❌ Backend failed to start in time"; docker compose logs; exit 1;
          fi

      - name: Enable KVM for Android Emulator
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Create local.properties for Android
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" >> local.properties
          echo "API_BASE_URL=${{ env.API_BASE_URL }}" >> local.properties

      - name: Grant execute permission for gradlew
        working-directory: Android-App-for-Car-Parking-Project
        run: chmod +x ./gradlew

      - name: Build Debug APK
        working-directory: Android-App-for-Car-Parking-Project
        run: ./gradlew assembleDebug --stacktrace
        env:
          ANDROID_HOME: ${{ secrets.ANDROID_HOME }}
          MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
          API_BASE_URL: ${{ env.API_BASE_URL }}

      - name: Extract Android package name
        id: extract_package
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          if [ -f "app/build.gradle.kts" ]; then
            PACKAGE_NAME=$(grep -E 'applicationId\s*=' app/build.gradle.kts \
              | sed -E 's/.*applicationId\s*=\s*"([^"]+)".*/\1/' \
              | head -1)
          elif [ -f "app/build.gradle" ]; then
            PACKAGE_NAME=$(grep -E 'applicationId\s+' app/build.gradle \
              | sed -E 's/.*applicationId\s+"([^"]+)".*/\1/' \
              | head -1)
          else
            echo "ERROR: Cannot find app/build.gradle.kts or app/build.gradle"
            exit 1
          fi
          if [ -z "$PACKAGE_NAME" ]; then
            PACKAGE_NAME="com.example.carparkingapp"
            echo "⚠️ Using fallback package name: $PACKAGE_NAME"
          fi
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "✔️ Found package: $PACKAGE_NAME"

      - name: Set up Python for Appium tests
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: Android-App-for-Car-Parking-Project/tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install latest Appium and UiAutomator2 driver
        run: |
          npm install -g appium@latest
          appium driver install uiautomator2@latest

      - name: Start Appium Server
        run: |
          nohup appium --base-path /wd/hub --log-level info > appium.log 2>&1 &
          for i in {1..10}; do
            if curl -s http://127.0.0.1:4723/wd/hub/status | grep -q 'status'; then
              echo "✅ Appium server is running"
              exit 0
            fi
            echo "Waiting for Appium server to start... ($i/10)"
            sleep 3
          done
          echo "❌ Appium server failed to start"; cat appium.log; exit 1

      - name: Create E2E test script
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          cat > e2e_test.sh << 'EOF'
          #!/bin/bash
          set -e
          echo "⏳ Waiting for emulator to boot..."
          adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          echo "✅ Emulator booted."
          adb logcat -c
          mkdir -p screenshots
          echo "📋 Starting logcat capture..."
          adb logcat > logcat.txt &
          LOGCAT_PID=$!
          echo "🎥 Starting screen recording..."
          adb shell screenrecord --time-limit=180 /sdcard/e2e_recording.mp4 &
          sleep 5
          echo "📦 Installing APK..."
          adb install -r app/build/outputs/apk/debug/app-debug.apk
          echo "🚀 Launching app..."
          adb shell "am start -n ${PACKAGE_NAME}/.MainActivity -a android.intent.action.MAIN -c android.intent.category.LAUNCHER"
          sleep 10
          echo "🧪 Running Appium Python tests..."
          cd tests
          pytest --html=../test-report.html --self-contained-html || true
          cd ..
          echo "🛑 Stopping app..."
          adb shell am force-stop "$PACKAGE_NAME" || true
          echo "🎥 Pulling screen recording..."
          adb pull /sdcard/e2e_recording.mp4 screenshots/ || true
          echo "🗒️ Stopping logcat..."
          kill $LOGCAT_PID || true
          sleep 2
          echo "📂 Screenshots:"
          ls -la screenshots/
          echo "🎉 E2E test script completed."
          EOF
          chmod +x e2e_test.sh

      - name: Run E2E Tests on Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: pixel_2
          avd-name: pixel_2_api_28
          ram-size: 4096M
          heap-size: 1024M
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -camera-back none -camera-front none
          disable-animations: true
          script: cd Android-App-for-Car-Parking-Project && ./e2e_test.sh
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}

      - name: Save Backend Logs
        if: always()
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          docker compose logs > ../backend_logs.txt || true
          docker compose ps > ../backend_status.txt || true

      - name: Upload Artifacts (APK, logs, screen recording, test report)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-artifacts
          path: |
            Android-App-for-Car-Parking-Project/app/build/outputs/apk/debug/app-debug.apk
            Android-App-for-Car-Parking-Project/screenshots/
            Android-App-for-Car-Parking-Project/logcat.txt
            Android-App-for-Car-Parking-Project/test-report.html
            Backend-Implementation-for-Car-Parking-Project/backend_logs.txt
            Backend-Implementation-for-Car-Parking-Project/backend_status.txt
          retention-days: 14

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          pkill -f appium || true
          docker compose -f Backend-Implementation-for-Car-Parking-Project/docker-compose.yml down -v || true