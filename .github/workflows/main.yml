name: Complete Appium Test Pipeline (Frontend + Backend)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Android-App-for-Car-Parking-Project/**'
      - 'Backend-Implementation-for-Car-Parking-Project/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Android-App-for-Car-Parking-Project/**'
      - 'Backend-Implementation-for-Car-Parking-Project/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      test_duration:
        description: 'Test duration in seconds'
        required: false
        default: '120'
        type: string
      api_level:
        description: 'Android API level'
        required: false
        default: '28'
        type: choice
        options:
          - '28'
          - '29'
          - '30'
          - '31'

env:
  API_BASE_URL: "http://10.0.2.2:5000/"
  TEST_DURATION: ${{ github.event.inputs.test_duration || '120' }}
  ANDROID_API_LEVEL: ${{ github.event.inputs.api_level || '28' }}

jobs:
  prepare-and-validate:
    name: üîç Prepare & Validate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      android-package: ${{ steps.extract-package.outputs.package_name }}
      backend-ready: ${{ steps.validate-backend.outputs.ready }}
    
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize and update submodules
        run: |
          git submodule update --init --recursive
          git submodule status
          if [ -d "Android-App-for-Car-Parking-Project" ]; then
            cd Android-App-for-Car-Parking-Project && git checkout main || git checkout master || true
          fi
          if [ -d "Backend-Implementation-for-Car-Parking-Project" ]; then
            cd Backend-Implementation-for-Car-Parking-Project && git checkout main || git checkout master || true
          fi

      - name: Validate project structure
        run: |
          echo "üîç Validating project structure..."
          if [ ! -d "Android-App-for-Car-Parking-Project" ]; then
            echo "‚ùå Android project directory not found"
            exit 1
          fi
          if [ ! -d "Backend-Implementation-for-Car-Parking-Project" ]; then
            echo "‚ùå Backend project directory not found"
            exit 1
          fi
          echo "‚úÖ Project structure validated"

      - name: Extract Android package name
        id: extract-package
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          if [ -f "app/build.gradle.kts" ]; then
            PACKAGE_NAME=$(grep -E 'applicationId\s*=' app/build.gradle.kts \
              | sed -E 's/.*applicationId\s*=\s*"([^"]+)".*/\1/' \
              | head -1)
          elif [ -f "app/build.gradle" ]; then
            PACKAGE_NAME=$(grep -E 'applicationId\s+' app/build.gradle \
              | sed -E 's/.*applicationId\s+"([^"]+)".*/\1/' \
              | head -1)
          else
            echo "ERROR: Cannot find app/build.gradle.kts or app/build.gradle"
            exit 1
          fi

          if [ -z "$PACKAGE_NAME" ]; then
            PACKAGE_NAME="com.example.carparkingapp"  # Fallback based on your test file
            echo "‚ö†Ô∏è Using fallback package name: $PACKAGE_NAME"
          fi

          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Android package: $PACKAGE_NAME"

      - name: Validate backend configuration
        id: validate-backend
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          if [ -f "docker-compose.yml" ] || [ -f "docker-compose.yaml" ]; then
            echo "ready=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Backend Docker configuration found"
          else
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Backend Docker configuration not found"
          fi

  build-backend:
    name: üèóÔ∏è Build & Start Backend
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: prepare-and-validate
    if: needs.prepare-and-validate.outputs.backend-ready == 'true'
    
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start backend services
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          echo "üöÄ Starting backend services..."
          docker compose down -v || true
          docker compose up -d --build
          echo "‚è≥ Waiting for services to initialize..."
          sleep 15

      - name: Wait for backend readiness
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          echo "‚è≥ Waiting for Flask server to be ready..."
          timeout=120
          while [ $timeout -gt 0 ]; do
            if docker compose logs web | grep -q "Running on http://" && \
               docker compose logs web | grep -q "Debugger is active!" || \
               docker compose logs web | grep -q "Serving Flask app"; then
              echo "‚úÖ Flask server is running!"
              sleep 5
              if curl -s -f http://127.0.0.1:5000/ > /dev/null || \
                 curl -s -f http://127.0.0.1:5000/health > /dev/null; then
                echo "‚úÖ Backend is responding to requests!"
                break
              fi
            fi
            echo "‚è≥ Waiting for Flask server... ($timeout seconds remaining)"
            sleep 5
            timeout=$((timeout-5))
          done

          if [ $timeout -le 0 ]; then
            echo "‚ùå Backend failed to start within timeout"
            echo "Docker compose status:"
            docker compose ps
            echo "Backend logs:"
            docker compose logs --tail=50
            exit 1
          fi

      - name: Test backend endpoints
        run: |
          echo "üß™ Testing backend endpoints..."
          # Test basic connectivity
          curl -s -f http://127.0.0.1:5000/ > /dev/null && echo "‚úÖ Root endpoint working" || echo "‚ùå Root endpoint failed"
          # Test API health if available
          curl -s -f http://127.0.0.1:5000/health > /dev/null && echo "‚úÖ Health endpoint working" || echo "‚ö†Ô∏è Health endpoint not available"
          # Test API endpoints if available
          curl -s -f http://127.0.0.1:5000/api/ > /dev/null && echo "‚úÖ API endpoint working" || echo "‚ö†Ô∏è API endpoint not available"

  build-android:
    name: üì± Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: prepare-and-validate
    
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Enable KVM for Android builds
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Create local.properties
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" >> local.properties
          echo "API_BASE_URL=${{ env.API_BASE_URL }}" >> local.properties

      - name: Grant execute permission for gradlew
        working-directory: Android-App-for-Car-Parking-Project
        run: chmod +x ./gradlew

      - name: Clean and build Debug APK
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          ./gradlew clean
          ./gradlew assembleDebug --stacktrace --info
        env:
          MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
          API_BASE_URL: ${{ env.API_BASE_URL }}

      - name: Verify APK exists
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
          if [ -f "$APK_PATH" ]; then
            echo "‚úÖ APK built successfully: $APK_PATH"
            ls -la "$APK_PATH"
          else
            echo "‚ùå APK not found at expected location"
            find . -name "*.apk" -type f || echo "No APK files found"
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: Android-App-for-Car-Parking-Project/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 7

  appium-tests:
    name: üß™ Run Appium Tests
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [prepare-and-validate, build-backend, build-android]
    if: always() && (needs.build-android.result == 'success')
    
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up Python for Appium tests
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: Android-App-for-Car-Parking-Project/tests
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            # Install basic Appium dependencies
            pip install appium-python-client selenium pytest pytest-html pytest-xdist
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: Android-App-for-Car-Parking-Project/app/build/outputs/apk/debug/

      - name: Start Backend Services (if available)
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          if [ -f "docker-compose.yml" ] || [ -f "docker-compose.yaml" ]; then
            echo "üöÄ Starting backend services for integration testing..."
            docker compose down -v || true
            docker compose up -d --build
            echo "‚è≥ Waiting for backend to stabilize..."
            sleep 20
            
            # Wait for backend readiness
            timeout=60
            while [ $timeout -gt 0 ]; do
              if curl -s -f http://127.0.0.1:5000/ > /dev/null; then
                echo "‚úÖ Backend is ready for integration testing!"
                break
              fi
              echo "‚è≥ Waiting for backend... ($timeout seconds remaining)"
              sleep 5
              timeout=$((timeout-5))
            done
          else
            echo "‚ö†Ô∏è No backend configuration found, running frontend-only tests"
          fi

      - name: Install and Start Appium Server
        run: |
          echo "üì± Installing Appium..."
          npm install -g appium@next
          appium driver install uiautomator2
          appium driver list --installed
          
          echo "üöÄ Starting Appium server..."
          appium --base-path /wd/hub --log-level info &
          APPIUM_PID=$!
          echo "APPIUM_PID=$APPIUM_PID" >> $GITHUB_ENV
          
          echo "‚è≥ Waiting for Appium server to start..."
          sleep 10
          
          # Verify Appium server is running
          if curl -s http://127.0.0.1:4723/wd/hub/status > /dev/null; then
            echo "‚úÖ Appium server is running"
          else
            echo "‚ùå Appium server failed to start"
            exit 1
          fi

      - name: Create comprehensive test script
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          cat > comprehensive_test.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "üîç Test Configuration:"
          echo "  - Package: ${{ needs.prepare-and-validate.outputs.android-package }}"
          echo "  - API Level: ${{ env.ANDROID_API_LEVEL }}"
          echo "  - Test Duration: ${{ env.TEST_DURATION }}s"
          echo "  - Backend URL: ${{ env.API_BASE_URL }}"

          echo "‚è≥ Waiting for emulator boot..."
          adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          echo "‚úÖ Emulator ready!"

          echo "üì± Device information:"
          adb shell getprop ro.build.version.release
          adb shell getprop ro.product.model
          adb shell wm size

          echo "üßπ Preparing test environment..."
          adb logcat -c
          mkdir -p screenshots test-results

          echo "üìã Starting logcat capture..."
          adb logcat > logcat.txt &
          LOGCAT_PID=$!

          echo "üé• Starting screen recording..."
          adb shell screenrecord --time-limit=300 /sdcard/appium_test_recording.mp4 &
          RECORDING_PID=$!

          echo "üì¶ Installing APK..."
          adb install -r -d app/build/outputs/apk/debug/app-debug.apk

          echo "üåê Testing backend connectivity from emulator..."
          if adb shell "curl -s -m 10 -f http://10.0.2.2:5000/" > /dev/null 2>&1; then
            echo "‚úÖ Backend reachable from emulator"
            BACKEND_AVAILABLE=true
          else
            echo "‚ö†Ô∏è Backend not reachable from emulator (will run app-only tests)"
            BACKEND_AVAILABLE=false
          fi

          echo "üß™ Running Appium tests..."
          cd tests
          
          # Run the actual Appium tests if they exist
          if [ -f "test_parking_app.py" ]; then
            echo "üß™ Running structured Appium tests..."
            python -m pytest test_parking_app.py -v \
              --html=../test-results/appium-report.html \
              --self-contained-html \
              --tb=short \
              --capture=no || echo "‚ö†Ô∏è Some Appium tests failed, continuing..."
          else
            echo "‚ö†Ô∏è No structured tests found, running basic app interaction..."
            
            # Basic app launch and interaction test
            python3 << 'PYTHON_EOF'
          import time
          from appium import webdriver
          from appium.options.android import UiAutomator2Options
          from appium.webdriver.common.appiumby import AppiumBy

          try:
              print("üöÄ Launching app for basic interaction test...")
              
              options = UiAutomator2Options()
              options.platform_name = 'Android'
              options.automation_name = 'UiAutomator2'
              options.device_name = 'Android Emulator'
              options.app_package = '${{ needs.prepare-and-validate.outputs.android-package }}'
              options.app_activity = '${{ needs.prepare-and-validate.outputs.android-package }}.MainActivity'
              options.new_command_timeout = 60
              
              driver = webdriver.Remote('http://127.0.0.1:4723', options=options)
              print("‚úÖ Connected to app via Appium")
              
              # Basic app interaction
              time.sleep(5)  # Let app load
              
              # Take screenshot
              driver.save_screenshot('../screenshots/app_launch.png')
              print("üì∏ Screenshot taken")
              
              # Try to find and interact with basic elements
              try:
                  # Look for common UI elements
                  elements = driver.find_elements(AppiumBy.CLASS_NAME, "android.widget.Button")
                  print(f"üîç Found {len(elements)} buttons")
                  
                  if elements:
                      elements[0].click()
                      time.sleep(2)
                      driver.save_screenshot('../screenshots/after_click.png')
                      print("üñ±Ô∏è Clicked first button and took screenshot")
                  
              except Exception as e:
                  print(f"‚ö†Ô∏è Element interaction failed: {e}")
              
              # Keep app running for the specified duration
              duration = int('${{ env.TEST_DURATION }}')
              print(f"‚è≤Ô∏è Running for {duration} seconds...")
              
              for i in range(0, duration, 15):
                  time.sleep(15)
                  remaining = duration - i - 15
                  if remaining > 0:
                      driver.save_screenshot(f'../screenshots/runtime_{i+15}s.png')
                      print(f"üì∏ Runtime screenshot at {i+15}s (remaining: {remaining}s)")
              
              driver.save_screenshot('../screenshots/final.png')
              print("üì∏ Final screenshot taken")
              
              driver.quit()
              print("‚úÖ Basic interaction test completed")
              
          except Exception as e:
              print(f"‚ùå Basic interaction test failed: {e}")
              import traceback
              traceback.print_exc()
          PYTHON_EOF
          fi

          cd ..

          echo "üõë Stopping app..."
          adb shell am force-stop "${{ needs.prepare-and-validate.outputs.android-package }}" || true
          
          echo "üé• Stopping screen recording..."
          adb shell pkill -SIGINT screenrecord || true
          sleep 3
          adb pull /sdcard/appium_test_recording.mp4 screenshots/ || echo "‚ö†Ô∏è Could not retrieve screen recording"

          echo "üóíÔ∏è Stopping logcat capture..."
          kill $LOGCAT_PID || true
          sleep 2

          echo "üìä Test Summary:"
          echo "  - Screenshots: $(ls screenshots/ | wc -l)"
          echo "  - Logcat size: $(wc -l < logcat.txt) lines"
          echo "  - Backend available: $BACKEND_AVAILABLE"

          echo "üéâ Comprehensive test completed!"
          EOF
          chmod +x comprehensive_test.sh

      - name: Run Comprehensive Tests with Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          target: default
          arch: x86_64
          profile: pixel_2
          avd-name: test_avd
          ram-size: 4096M
          heap-size: 1024M
          disk-size: 8192M
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -camera-back none -camera-front none -memory 4096
          disable-animations: true
          script: cd Android-App-for-Car-Parking-Project && ./comprehensive_test.sh

      - name: Save Backend Logs
        if: always()
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          if [ -f "docker-compose.yml" ] || [ -f "docker-compose.yaml" ]; then
            echo "üíæ Saving backend logs..."
            docker compose logs > ../backend_logs.txt || true
            docker compose ps > ../backend_status.txt || true
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: appium-test-results
          path: |
            Android-App-for-Car-Parking-Project/test-results/
            Android-App-for-Car-Parking-Project/screenshots/
            Android-App-for-Car-Parking-Project/logcat.txt
          retention-days: 14

      - name: Upload Backend Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-logs
          path: |
            backend_logs.txt
            backend_status.txt
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          # Stop Appium server
          if [ ! -z "${APPIUM_PID:-}" ]; then
            kill $APPIUM_PID || true
          fi
          # Stop backend if running
          if [ -d "Backend-Implementation-for-Car-Parking-Project" ]; then
            cd Backend-Implementation-for-Car-Parking-Project
            docker compose down -v || true
          fi

  report:
    name: üìä Generate Test Report
    runs-on: ubuntu-latest
    needs: [prepare-and-validate, build-backend, build-android, appium-tests]
    if: always()
    
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: appium-test-results
          path: test-results

      - name: Generate summary report
        run: |
          cat > test-summary.md << 'EOF'
          # üß™ Appium Test Pipeline Summary
          
          ## üìã Test Configuration
          - **Android Package**: ${{ needs.prepare-and-validate.outputs.android-package }}
          - **API Level**: ${{ env.ANDROID_API_LEVEL }}
          - **Test Duration**: ${{ env.TEST_DURATION }}s
          - **Backend Available**: ${{ needs.prepare-and-validate.outputs.backend-ready }}
          
          ## üèóÔ∏è Build Results
          - **Backend Build**: ${{ needs.build-backend.result }}
          - **Android Build**: ${{ needs.build-android.result }}
          - **Appium Tests**: ${{ needs.appium-tests.result }}
          
          ## üì± Test Artifacts
          - Screenshots captured during test execution
          - Android logcat output
          - Backend service logs (if available)
          - Screen recording of test execution
          
          ## üîç Next Steps
          - Review screenshots for UI issues
          - Check logcat for runtime errors
          - Verify backend integration points
          - Update test cases based on findings
          EOF

      - name: Upload summary report
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 30