name: Run Android App + Backend Integration Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Android-App-for-Car-Parking-Project/**'
      - 'Backend-Implementation-for-Car-Parking-Project/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Android-App-for-Car-Parking-Project/**'
      - 'Backend-Implementation-for-Car-Parking-Project/**'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      API_BASE_URL: "http://10.0.2.2:5000/"

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize and update submodules
        run: |
          git submodule update --init --recursive
          git submodule status

      - name: Enable KVM for Android Emulator
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create local.properties for Android
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" >> local.properties
          echo "API_BASE_URL=${{ env.API_BASE_URL }}" >> local.properties

      - name: Grant execute permission for gradlew
        working-directory: Android-App-for-Car-Parking-Project
        run: chmod +x ./gradlew

      - name: Build Debug APK
        working-directory: Android-App-for-Car-Parking-Project
        run: ./gradlew assembleDebug --stacktrace
        env:
          ANDROID_HOME: ${{ secrets.ANDROID_HOME }}
          MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
          API_BASE_URL: ${{ env.API_BASE_URL }}

      - name: Extract Android package name
        working-directory: Android-App-for-Car-Parking-Project
        id: extract_package
        run: |
          if [ -f "app/build.gradle.kts" ]; then
            PACKAGE_NAME=$(grep -E 'applicationId\s*=' app/build.gradle.kts \
              | sed -E 's/.*applicationId\s*=\s*"([^"]+)".*/\1/' \
              | head -1)
          elif [ -f "app/build.gradle" ]; then
            PACKAGE_NAME=$(grep -E 'applicationId\s+' app/build.gradle \
              | sed -E 's/.*applicationId\s+"([^"]+)".*/\1/' \
              | head -1)
          else
            echo "ERROR: Cannot find app/build.gradle.kts or app/build.gradle"
            exit 1
          fi

          if [ -z "$PACKAGE_NAME" ]; then
            echo "ERROR: applicationId not found in Gradle files!"
            exit 1
          fi

          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "✔️ Found package: $PACKAGE_NAME"

      - name: Start Backend Services
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          echo "🚀 Starting backend services..."
          # Stop any existing containers first
          docker compose down -v || true
          # Start services with no auto-restart
          docker compose up -d --no-recreate
          echo "⏳ Waiting for services to start..."
          sleep 10
          echo "📋 Checking container status..."
          docker compose ps
          echo "📝 Container logs:"
          docker compose logs

      - name: Wait for Backend to be Ready
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          echo "⏳ Waiting for Flask server to start..."
          timeout=90
          while [ $timeout -gt 0 ]; do
            # Check if Flask server is running and has completed its initial restart
            if docker compose logs web | grep -q "Running on http://" && \
               docker compose logs web | grep -q "Debugger is active!"; then
              echo "✅ Flask server is running!"
              # Give it a moment to ensure it's truly stable
              sleep 5
              # Check if we can connect to the server
              if curl -s -f http://127.0.0.1:5000/ > /dev/null; then
                echo "✅ Backend is responding to requests!"
                break
              fi
            fi
            echo "⏳ Waiting for Flask server to stabilize... ($timeout seconds remaining)"
            sleep 5
            timeout=$((timeout-5))
          done

          if [ $timeout -le 0 ]; then
            echo "❌ Flask server failed to stabilize within timeout"
            echo "Last 50 lines of web container logs:"
            docker compose logs --tail=50 web
            exit 1
          fi

      - name: Create Integration Test Script
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          cat > integration_test.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "⏳ Waiting for emulator to boot..."
          adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          echo "✅ Emulator booted successfully!"

          echo "🧹 Clearing previous logcat..."
          adb logcat -c

          echo "📋 Starting background logcat capture..."
          adb logcat > /tmp/logcat.txt &
          LOGCAT_PID=$!

          echo "🌐 Testing backend connectivity from emulator..."
          # Test if emulator can reach backend at 10.0.2.2:5000
          if adb shell "curl -s -f http://10.0.2.2:5000/" > /dev/null; then
            echo "✅ Backend is reachable from emulator!"
          else
            echo "⚠️ Backend might not be reachable from emulator, but continuing..."
          fi

          echo "📦 Installing APK..."
          adb install -r app/build/outputs/apk/debug/app-debug.apk

          echo "🚀 Launching Android app..."
          adb shell "am start -n ${PACKAGE_NAME}/.MainActivity -a android.intent.action.MAIN -c android.intent.category.LAUNCHER"

          echo "⏲️ Running integration test for 60 seconds..."
          start_time=$(date +%s)
          
          # Create screenshots directory
          mkdir -p screenshots
          screenshot_count=1

          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))

            # Stop after 60 seconds
            if [ $elapsed -ge 60 ]; then
              echo "✅ Completed 60-second integration test!"
              break
            fi

            # Take screenshot every 10 seconds
            if [ $((elapsed % 10)) -eq 0 ] && [ $elapsed -gt 0 ]; then
              echo "📸 Taking screenshot ${screenshot_count} at ${elapsed}s..."
              adb shell screencap -p /sdcard/screenshot_${elapsed}s.png
              adb pull /sdcard/screenshot_${elapsed}s.png screenshots/
              screenshot_count=$((screenshot_count + 1))
            fi

            # Health check every 15 seconds
            if [ $((elapsed % 15)) -eq 0 ] && [ $elapsed -gt 0 ]; then
              echo "🔍 Health check at ${elapsed}s..."
              
              # Check if app is still running
              if adb shell pidof "$PACKAGE_NAME" > /dev/null; then
                echo "📱 Android app is running (${elapsed}s/60s)"
              else
                echo "💥 Android app crashed at ${elapsed}s! Dumping crash logs:"
                adb logcat -d \
                  | grep -E "(FATAL|AndroidRuntime|$PACKAGE_NAME|Exception|Error)" \
                  | tail -20
                break
              fi
              
              # Check backend status
              if curl -s -f http://127.0.0.1:5000/ > /dev/null; then
                echo "🌐 Backend is responding"
              else
                echo "⚠️ Backend is not responding"
              fi
            fi

            sleep 1
          done

          # Take final screenshot
          echo "📸 Taking final screenshot..."
          adb shell screencap -p /sdcard/screenshot_final.png
          adb pull /sdcard/screenshot_final.png screenshots/

          echo "🛑 Stopping Android app..."
          adb shell am force-stop "$PACKAGE_NAME" || true

          echo "🗒️ Stopping logcat capture..."
          kill $LOGCAT_PID || true
          sleep 2

          echo "📂 Final logcat (last 100 lines):"
          tail -n 100 /tmp/logcat.txt || true

          echo "📸 Screenshots captured:"
          ls -la screenshots/

          echo "🎉 Integration test completed successfully!"
          EOF
          chmod +x integration_test.sh

      - name: Run Integration Test (Android App + Backend)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: pixel_2
          avd-name: pixel_2_api_28
          ram-size: 4096M
          heap-size: 1024M
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -camera-back none -camera-front none
          disable-animations: true
          script: cd Android-App-for-Car-Parking-Project && ./integration_test.sh
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}

      - name: Save Backend Logs
        if: always()
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          echo "💾 Saving backend logs..."
          docker compose logs > ../backend_logs.txt
          docker compose ps > ../backend_status.txt

      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-screenshots
          path: Android-App-for-Car-Parking-Project/screenshots/
          retention-days: 7

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: app-debug-apk
          path: Android-App-for-Car-Parking-Project/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 3

      - name: Upload Android Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-app-logs
          path: /tmp/logcat.txt
          retention-days: 7

      - name: Upload Backend Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-service-logs
          path: |
            backend_logs.txt
            backend_status.txt
          retention-days: 7

      - name: Cleanup Services
        if: always()
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          echo "🧹 Cleaning up backend services..."
          docker compose down -v || true
          echo "📋 Checking for remaining containers..."
          docker ps -a || true