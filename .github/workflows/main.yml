name: Android App Test with Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'Android-App-for-Car-Parking-Project/**'
      - 'Backend-Implementation-for-Car-Parking-Project/**'
      - '.github/workflows/main.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Android-App-for-Car-Parking-Project/**'
      - 'Backend-Implementation-for-Car-Parking-Project/**'
      - '.github/workflows/main.yml'
  workflow_dispatch:

jobs:
  android-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      API_BASE_URL: "http://10.0.2.2:5000/"

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize and update submodules
        run: |
          git submodule update --init --recursive
          git submodule status

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start backend services
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: |
          docker compose up -d
          echo "Waiting for backend services to be ready..."
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:5000/health)" != "200" ]]; do sleep 2; done' || false
          echo "Backend services are up!"

      - name: Enable KVM
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo systemctl start libvirtd
          sudo systemctl enable libvirtd
          sudo usermod -aG kvm $USER
          sudo chmod 666 /dev/kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Create local.properties
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" >> local.properties

      - name: Grant execute permission for gradlew
        working-directory: Android-App-for-Car-Parking-Project
        run: chmod +x gradlew

      - name: Build debug APK
        working-directory: Android-App-for-Car-Parking-Project
        env:
          MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
        run: ./gradlew assembleDebug

      - name: Extract package name
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          PACKAGE_NAME=$(grep -o "applicationId.*" app/build.gradle | cut -d'"' -f2)
          if [ -z "$PACKAGE_NAME" ]; then
            PACKAGE_NAME=$(grep -o "namespace.*" app/build.gradle | cut -d'"' -f2)
          fi
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Create test script
        working-directory: Android-App-for-Car-Parking-Project
        run: |
          cat > test_script.sh << 'EOL'
          #!/bin/bash
          echo "Waiting for emulator..."
          adb wait-for-device
          echo "Installing APK..."
          adb install -r app/build/outputs/apk/debug/app-debug.apk
          echo "Launching app..."
          adb shell monkey -p $PACKAGE_NAME -c android.intent.category.LAUNCHER 1
          echo "Taking screenshots..."
          sleep 20
          adb shell screencap -p /sdcard/screenshot_1.png
          adb pull /sdcard/screenshot_1.png
          sleep 20
          adb shell screencap -p /sdcard/screenshot_2.png
          adb pull /sdcard/screenshot_2.png
          sleep 20
          adb shell screencap -p /sdcard/screenshot_3.png
          adb pull /sdcard/screenshot_3.png
          echo "Stopping app..."
          adb shell am force-stop $PACKAGE_NAME
          EOL
          chmod +x test_script.sh

      - name: Run app on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: pixel_2
          avd-name: pixel_2_api_28
          script: cd Android-App-for-Car-Parking-Project && ./test_script.sh
          working-directory: Android-App-for-Car-Parking-Project

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: app-screenshots
          path: Android-App-for-Car-Parking-Project/*.png
          if-no-files-found: error

      - name: Stop backend services
        if: always()
        working-directory: Backend-Implementation-for-Car-Parking-Project
        run: docker compose down
